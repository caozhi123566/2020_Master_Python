       我的研究方向是在计算机视觉这个大方向，具体说来是基于图片和视频的目标检测。
       计算机视觉是一门研究如何对数字图像或视频进行高层语义理解的交叉学科，它赋予机器“看”的智能，需要实现人的大脑中（主要是视觉皮层区）的视觉能力。
       在计算机视觉CV领域主要有八项任务，主要包括：
	图像分类：为图片中出现的物体目标分类出其所属类别的标签，如画面中的人、楼房、街道、车辆数目等；
	目标检测：将图片或者视频中感兴趣的目标提取出来，对于导盲系统来说，各类的车辆、行人、交通标识、红绿灯都是需要关注的对象；
	图像语义分割：将视野中的车辆和道路勾勒出来是必要的，这需要图像语义分割技术做为支撑，勾勒出图像物体中的前景物体的轮廓；
	场景文字识别：道路名、绿灯倒计时秒数、商店名称等，这些文字对于导盲功能的实现也是至关重要的；
	图像生成、人体关键点检测、视频分类、度量学习等。
       目标检测作为CV的一大任务之一，其对于图片的理解也发挥着重要的作用，目标检测定位图像中物体的位置，并在该物体周围绘制边界框，这通常涉及两个过程，分类物体类型，然后在该对象周围绘制一个框。
       一些常见的目标检测模型架构：
	R-CNN
	Fast R-CNN
	Faster R-CNN
	Mask R-CNN
	SSD (Single Shot MultiBox Defender)
	YOLO (You Only Look Once)
       而这些模型架构都可以利用诸如OpenCV搭建深度学习目标检测器，OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉库，可以运行在Linux、Windows、Android和Mac OS操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，其中很重要一点是提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。
       那么为什么在此库上选用python语言来处理程序呢？这是基于这门语言提供了大量科学研究的核心库和三方库，并且开发简单，这样使得我们在做目标检测研究的时候，可以不在繁琐的程序调试上花太多时间。
       而在开发工具这一块，我们一般是选用PyCharm开发平台结合python+tensorflow环境，以及其他一些三方库例如OpenCV库和框架模型例如MMDetection工具箱等等。